// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/notblessy/takeme-backend/model (interfaces: SubscriptionRepository)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/notblessy/takeme-backend/model"
)

// MockSubscriptionRepository is a mock of SubscriptionRepository interface.
type MockSubscriptionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionRepositoryMockRecorder
}

// MockSubscriptionRepositoryMockRecorder is the mock recorder for MockSubscriptionRepository.
type MockSubscriptionRepositoryMockRecorder struct {
	mock *MockSubscriptionRepository
}

// NewMockSubscriptionRepository creates a new mock instance.
func NewMockSubscriptionRepository(ctrl *gomock.Controller) *MockSubscriptionRepository {
	mock := &MockSubscriptionRepository{ctrl: ctrl}
	mock.recorder = &MockSubscriptionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionRepository) EXPECT() *MockSubscriptionRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSubscriptionRepository) Create(arg0 *model.Subscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSubscriptionRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSubscriptionRepository)(nil).Create), arg0)
}

// FindByID mocks base method.
func (m *MockSubscriptionRepository) FindByID(arg0 string, arg1 *model.Subscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindByID indicates an expected call of FindByID.
func (mr *MockSubscriptionRepositoryMockRecorder) FindByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockSubscriptionRepository)(nil).FindByID), arg0, arg1)
}
